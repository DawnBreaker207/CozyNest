import CustomLoadingPage from '@/components/Loading'
import instance from '@/configs/axios'
import { uploadFileCloudinary } from '@/hooks/uploadCloudinary'
import { vietnameseChars1 } from '@/validations/validate'
import { BackwardOutlined, UploadOutlined } from '@ant-design/icons'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { Button, Form, Input, message, Upload } from 'antd'
import { RcFile } from 'antd/es/upload'
import { useState } from 'react'
import { Link, useParams } from 'react-router-dom'

type Props = {}
type FieldType = {
  SKU: string
  name: string
  price?: number
  stock?: string
  image?: string
  price_before_discount?: number
  price_discount_percent?: number
}

const UpdateVariant = (props: Props) => {
  const [messageApi, contextHolder] = message.useMessage()
  const queryClient = useQueryClient()
  const { product_id, sku_id } = useParams()
  const [content, setContent] = useState<{ heading: string; paragraph: string; images: RcFile[] }[]>([
    { heading: '', paragraph: '', images: [] }
  ])
  const [thumbnail, setThumbnail] = useState<RcFile | null>(null)
  const [form] = Form.useForm()
  const { data, isLoading, isError, error } = useQuery({
    queryKey: ['variants', product_id, sku_id],
    queryFn: () => instance.get(`/variants/${product_id}/get/${sku_id}`)
  })
  console.log('üöÄ ~ UpdateVariant ~ data:', data)

  const { mutate } = useMutation({
    mutationFn: async (formData: FieldType) => {
      try {
        return instance.put(`/variants/${product_id}/${sku_id}`, formData)
      } catch (error) {
        throw new Error('C·∫≠p nh·∫≠t bi·∫øn th·ªÉ th·∫•t b·∫°i')
      }
    },
    onSuccess: () => {
      messageApi.open({
        type: 'success',
        content: 'C·∫≠p nh·∫≠t bi·∫øn th·ªÉ th√†nh c√¥ng'
      })
      queryClient.invalidateQueries({
        queryKey: ['variants']
      })
    },
    onError: (error) => {
      messageApi.open({
        type: 'error',
        content: error.message
      })
    }
  })
  const handleAddContent = () => {
    setContent([...content, { heading: '', paragraph: '', images: [] }])
  }
  const onFinish = async (values: any) => {
    const thumbnailUrl = thumbnail ? await uploadFileCloudinary(thumbnail) : data?.data?.res?.image

    // Upload ·∫£nh n·ªôi dung (n·∫øu c√≥)
    const contentWithUploadedImages = await Promise.all(
      content.map(async (section) => {
        const uploadedImages = await Promise.all(
          section.images.map(async (file) => ({
            url: await uploadFileCloudinary(file),
            caption: file.name
          }))
        )
        return { ...section, images: uploadedImages }
      })
    )

    const updatedValues = { ...values, content: contentWithUploadedImages, image: thumbnailUrl }

    mutate(updatedValues)
  }

  if (isLoading)
    return (
      <div>
        <CustomLoadingPage />
      </div>
    )
  if (isError) return <div>{error.message}</div>
  return (
    <div>
      {contextHolder}
      <div className='flex item-center justify-between max-w-4xl mx-auto mb-8'>
        <h1 className='text-2xl font-bold'>C·∫≠p nh·∫≠t bi·∫øn th·ªÉ</h1>
        <Link to={`/admin/products/${product_id}/variants`}>
          <Button>
            <BackwardOutlined />
            Quay l·∫°i
          </Button>
        </Link>
      </div>
      <Form
        form={form}
        name='basic'
        labelCol={{ span: 8 }}
        wrapperCol={{ span: 16 }}
        style={{ maxWidth: 600 }}
        initialValues={{ ...data?.data?.res, image: data?.data?.res?.image || null }}
        onFinish={onFinish}
        // onFinishFailed={onFinishFailed}
        autoComplete='off'
      >
        <Form.Item<FieldType> label='SKU' name='SKU' rules={[{ required: true, message: 'Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng!' }]}>
          <Input disabled />
        </Form.Item>
        <Form.Item<FieldType>
          label='T√™n bi·∫øn th·ªÉ'
          name='name'
          rules={[
            { required: true, message: 'T√™n bi·∫øn th·ªÉ l√† b·∫Øt bu·ªôc' },
            {
              min: 6,
              message: 'T√™n bi·∫øn th·ªÉ ph·∫£i c√≥ t·ªëi thi·ªÉu 6 k√Ω t·ª±'
            },
            {
              validator: (_, value) => {
                if (!value || vietnameseChars1.test(value)) {
                  return Promise.resolve()
                }
                return Promise.reject(new Error('Ch·ªØ c√°i ƒë·∫ßu ti√™n ph·∫£i l√† ch·ªØ v√† kh√¥ng ƒë∆∞·ª£c l√† k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c s·ªë'))
              }
            }
          ]}
        >
          <Input disabled />
        </Form.Item>
        <Form.Item<FieldType>
          label='·∫¢nh bi·∫øn th·ªÉ'
          name='image'
          rules={[{ required: true, message: 'Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng!' }]}
        >
          <Upload
            beforeUpload={(file) => {
              setThumbnail(file) // L∆∞u file v√†o state thumbnail
              form.setFieldsValue({ image: file })
              return false
            }}
            showUploadList={false}
          >
            <Button icon={<UploadOutlined />}>T·∫£i ·∫£nh</Button>
          </Upload>
          {/* Hi·ªÉn th·ªã ·∫£nh m·ªõi n·∫øu ƒë√£ ch·ªçn */}
          {thumbnail && (
            <div className='mt-2'>
              <img
                src={URL.createObjectURL(thumbnail)}
                alt='·∫¢nh'
                style={{ width: '100%', maxWidth: '300px', marginTop: '10px' }}
              />
            </div>
          )}
          {/* Hi·ªÉn th·ªã ·∫£nh c≈© n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi */}
          {!thumbnail && data?.data?.res?.image && (
            <div className='mt-2'>
              <img
                src={data?.data?.res?.image[0]}
                alt='·∫¢nh'
                style={{ width: '100%', maxWidth: '300px', marginTop: '10px' }}
              />
            </div>
          )}
        </Form.Item>

        <Form.Item<FieldType>
          label='S·ªë l∆∞·ª£ng'
          name='stock'
          rules={[
            { required: true, message: 'S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng!' },
            {
              pattern: /^[0-9]+$/,
              message: 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± kh√°c'
            },
            {
              validator: (_, value) => (value < 0 ? Promise.reject('S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!') : Promise.resolve())
            }
          ]}
        >
          <Input style={{ width: '30%' }} />
        </Form.Item>
        <Form.Item<FieldType>
          label='Gi√°'
          name='price'
          rules={[
            { required: true, message: 'Gi√° kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng!' },
            {
              pattern: /^[0-9]+$/,
              message: 'Gi√° ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± kh√°c'
            },
            {
              validator: (_, value) => (value < 0 ? Promise.reject('Gi√° kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!') : Promise.resolve())
            }
          ]}
        >
          <Input style={{ width: '30%' }} />
        </Form.Item>

        <Form.Item<FieldType>
          label='Gi√° c≈©'
          name='price_before_discount'
          rules={[
            { required: true, message: 'Gi√° kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng!' },
            {
              pattern: /^[0-9]+$/,
              message: 'Gi√° ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± kh√°c'
            },
            {
              validator: (_, value) => (value < 0 ? Promise.reject('Gi√° kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!') : Promise.resolve())
            },
            ({ getFieldValue }) => ({
              validator(_, value) {
                const price = getFieldValue('price')
                if (value <= price) {
                  return Promise.reject(new Error('Gi√° c≈© ph·∫£i l·ªõn h∆°n gi√° m·ªõi!'))
                }
                return Promise.resolve()
              }
            })
          ]}
        >
          <Input style={{ width: '30%' }} />
        </Form.Item>
        <Form.Item
          label='Gi·∫£m gi√°'
          name='price_discount_percent'
          rules={[
            {
              validator: (_, value) => {
                if (value && (!/^[0-9]+(\.[0-9]+)?$/.test(value) || parseFloat(value) < 0)) {
                  return Promise.reject(
                    new Error('Gi·∫£m gi√° ph·∫£i l√† s·ªë l·ªõn h∆°n 0 v√† kh√¥ng ƒë∆∞·ª£c ch·ª©a ch·ªØ ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát')
                  )
                }
                if (value && parseFloat(value) > 100) {
                  return Promise.reject(new Error('Gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100'))
                }
                return Promise.resolve()
              }
            }
          ]}
        >
          <Input style={{ width: '30%' }} />
        </Form.Item>

        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
          <Button type='primary' htmlType='submit'>
            C·∫≠p nh·∫≠t
          </Button>
        </Form.Item>
      </Form>
    </div>
  )
}

export default UpdateVariant
