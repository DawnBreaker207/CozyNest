import CustomLoadingPage from '@/components/Loading'
import instance from '@/configs/axios'
import useProductMutation from '@/hooks/useProductMutation'
import { useProduct } from '@/hooks/useProductQuery'
import { ICategory } from '@/types/category'
import { IProduct } from '@/types/product'
import { BackwardOutlined } from '@ant-design/icons'
import { useQuery } from '@tanstack/react-query'
import { Button, Checkbox, Form, Input, message, Select } from 'antd'
import ReactQuill from 'react-quill'
import { Link, useNavigate, useParams } from 'react-router-dom'
import 'react-quill/dist/quill.snow.css' // Import React Quill CSS

const ProductEditPage = () => {
  const [messageApi, contextHolder] = message.useMessage()
  const navigate = useNavigate()
  const { id } = useParams()

  // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
  const { data, isLoading, isError, error } = useProduct(id as string)
  console.log('üöÄ ~ ProductEditPage ~ data:', data)
  const category_id = data?.category_id?._id
  // Mutation ƒë·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m
  const { mutate } = useProductMutation({
    action: 'UPDATE',
    onSuccess: () => {
      messageApi.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng')
      setTimeout(() => {
        navigate(`/admin/products`)
      }, 900)
    }
  })

  // L·∫•y danh m·ª•c s·∫£n ph·∫©m
  const { data: categories } = useQuery({
    queryKey: ['categories'],
    queryFn: async () => await instance.get(`/categories`)
  })
  console.log('üöÄ ~ ProductEditPage ~ categories:', categories)

  // H√†m x·ª≠ l√Ω khi form submit
  const onFinish = (values: IProduct) => {
    // ƒê·∫£m b·∫£o r·∫±ng _id t·ª´ d·ªØ li·ªáu ban ƒë·∫ßu (data) ƒë∆∞·ª£c gi·ªØ l·∫°i trong product khi g·ª≠i ƒëi
    const updatedProduct = {
      // D·ªØ li·ªáu s·∫£n ph·∫©m hi·ªán t·∫°i
      ...data,
      // Gi√° tr·ªã form m·ªõi
      ...values,
      // ƒê·∫£m b·∫£o r·∫±ng _id kh√¥ng b·ªã m·∫•t
      _id: data!._id
    }
    // G·ª≠i d·ªØ li·ªáu s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    mutate(updatedProduct)
  }

  if (isLoading)
    return (
      <div>
        <CustomLoadingPage />
      </div>
    )
  if (isError) return <div>{error.message}</div>

  return (
    <>
      {contextHolder}
      <div className='bg-white rounded-lg'>
        <Form
          layout='vertical'
          onFinish={onFinish}
          // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho form, bao g·ªìm categoryId t·ª´ s·∫£n ph·∫©m
          initialValues={{
            ...data, // Gi√° tr·ªã s·∫£n ph·∫©m tr·∫£ v·ªÅ t·ª´ API
            category_id
          }}
        >
          <div className='flex justify-between'>
            <div>
              <span className='text-2xl font-bold'>C·∫≠p nh·∫≠t s·∫£n ph·∫©m</span>
            </div>
            <div className='flex items-center space-x-2'>
              <Button icon={<BackwardOutlined />}>
                <Link to={`/admin/products`}>Quay l·∫°i</Link>
              </Button>
            </div>
          </div>

          <div className='flex justify-between mt-5'>
            <div className='w-[75%] pr-4'>
              <Form.Item
                label='T√™n s·∫£n ph·∫©m'
                name='name'
                rules={[
                  {
                    required: true,
                    message: 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc'
                  },
                  {
                    min: 6,
                    message: 'T√™n s·∫£n ph·∫©m ph·∫£i c√≥ t·ªëi thi·ªÉu 6 k√Ω t·ª±'
                  },
                  {
                    validator: (_, value) => {
                      if (!value) {
                        return Promise.reject(new Error('T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng'))
                      }

                      // Ki·ªÉm tra ƒë·∫ßu ti√™n ch·ªØ c√°i ƒë·∫ßu ph·∫£i l√† ch·ªØ v√† kh√¥ng ph·∫£i k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c s·ªë
                      if (
                        !/^[a-zA-Z√Ä√Å√Ç√É·∫¢·∫†·∫Æ·∫∂·∫≤·∫®·∫¶·∫¨·∫™·∫§√à√â·∫∫·∫∏√ä·ªÄ·ªÜ·∫æ·ªÇ·ªÑ√å√ç√í√ì√î√ï·ªé·ªí·ªê·ªî·ªò√ï·ªú∆†·ª¢·ªö·ª†·ªû√ô·ª§≈®√ö∆Ø·ª™·ª¨·ª®·ªÆ·ª∞ƒÇƒêƒ®≈®∆†√†√°·∫£·∫°√¢√£·∫Ø·∫±·∫∑·∫≥·∫©·∫ß·∫≠·∫•√®√©√™·ªÅ·∫ø·ªÉ·ªá·ªÖ√¨√≠√≤√≥√¥√µ·ªè·ªù∆°·ªü·ªõp·ª°·ª£·ªì√¥·ªï·ªë·ªó·ªô√π·ª•≈©√∫ƒÉƒëƒ©∆∞·ªß·ª´·ª©·ª±·ªØ·ª≠∆°∆ØƒÇ√Ç√ä√î∆†∆∞ƒÉ√¢√™√¥∆°·ª≤√ù·ª¥·ª∂·ª∏·ª≥√Ω·ªµ·ª∑·ªπ]/.test(
                          value
                        )
                      ) {
                        return Promise.reject(
                          new Error('Ch·ªØ c√°i ƒë·∫ßu ti√™n ph·∫£i l√† ch·ªØ v√† kh√¥ng ƒë∆∞·ª£c l√† k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c s·ªë')
                        )
                      }

                      // Ki·ªÉm tra kho·∫£ng c√°ch kh√¥ng qu√° 2 l·∫ßn li√™n ti·∫øp
                      if (/\s{2,}/.test(value)) {
                        return Promise.reject(new Error('T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c c√≥ qu√° 2 kho·∫£ng c√°ch li√™n ti·∫øp'))
                      }

                      return Promise.resolve()
                    }
                  }
                ]}
              >
                <Input placeholder='T√™n s·∫£n ph·∫©m' className='w-full' />
              </Form.Item>
              <Form.Item
                label='M√¥ t·∫£'
                name='description'
                rules={[
                  { required: true, message: 'M√¥ t·∫£ l√† b·∫Øt bu·ªôc!' },
                  {
                    min: 6,
                    message: 'M√¥ t·∫£ s·∫£n ph·∫©m ph·∫£i c√≥ t·ªëi thi·ªÉu 6 k√Ω t·ª±!'
                  }
                ]}
              >
                <ReactQuill theme='snow' placeholder='Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m' />
              </Form.Item>
            </div>

            <div className='w-[20%]'>
              <Form.Item
                label='Danh m·ª•c'
                name='category_id'
                rules={[{ required: true, message: 'B·∫Øt bu·ªôc ch·ªçn danh m·ª•c!' }]}
              >
                <Select
                  showSearch
                  placeholder='Ch·ªçn danh m·ª•c'
                  optionFilterProp='label'
                  options={categories?.data?.res?.map((category: ICategory) => ({
                    value: category._id,
                    label: category.name
                  }))}
                />
              </Form.Item>
              <Form.Item
                label='M√£ s·∫£n ph·∫©m'
                name='SKU'
                rules={[
                  { required: true, message: 'M√£ s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc!' },
                  {
                    min: 6,
                    message: 'M√£ s·∫£n ph·∫©m ph·∫£i c√≥ t·ªëi thi·ªÉu 6 k√Ω t·ª±!'
                  }
                ]}
              >
                <Input placeholder='M√£ s·∫£n ph·∫©m' className='w-full' />
              </Form.Item>
              <div>
                <Form.Item label='Tr·∫°ng th√°i hi·ªÉn th·ªã' name='is_hidden' valuePropName='checked'>
                  <Checkbox>·∫®n</Checkbox>
                </Form.Item>
              </div>
            </div>
          </div>
          <Button type='primary' htmlType='submit'>
            C·∫≠p nh·∫≠t
          </Button>
        </Form>
      </div>
    </>
  )
}

export default ProductEditPage
